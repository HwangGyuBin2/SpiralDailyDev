// Mocks generated by Mockito 5.3.2 from annotations
// in apps.daily_memo/test/domain/usecase/memo_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:apps.daily_memo/domain/model/home/memo_info.dart' as _i5;
import 'package:apps.daily_memo/domain/model/home/memo_info_list.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

import 'memo_usecase_test.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMemoInfoList_0 extends _i1.SmartFake implements _i2.MemoInfoList {
  _FakeMemoInfoList_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MockMemoRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockMemoRepo extends _i1.Mock implements _i3.MockMemoRepo {
  MockMockMemoRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.MemoInfoList> get getAllMemoInfo => (super.noSuchMethod(
        Invocation.getter(#getAllMemoInfo),
        returnValue: _i4.Future<_i2.MemoInfoList>.value(_FakeMemoInfoList_0(
          this,
          Invocation.getter(#getAllMemoInfo),
        )),
      ) as _i4.Future<_i2.MemoInfoList>);
  @override
  _i4.Future<_i5.MemoInfo?> getMemoInfoById(int? memoId) => (super.noSuchMethod(
        Invocation.method(
          #getMemoInfoById,
          [memoId],
        ),
        returnValue: _i4.Future<_i5.MemoInfo?>.value(),
      ) as _i4.Future<_i5.MemoInfo?>);
  @override
  _i4.Future<bool> addMemo({
    required String? title,
    required String? content,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMemo,
          [],
          {
            #title: title,
            #content: content,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<_i5.MemoInfo?> modifyMemo({
    required int? memoId,
    required String? title,
    required String? content,
    required String? madeDateTime,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #modifyMemo,
          [],
          {
            #memoId: memoId,
            #title: title,
            #content: content,
            #madeDateTime: madeDateTime,
          },
        ),
        returnValue: _i4.Future<_i5.MemoInfo?>.value(),
      ) as _i4.Future<_i5.MemoInfo?>);
  @override
  _i4.Future<bool> deleteMemo(int? memoId) => (super.noSuchMethod(
        Invocation.method(
          #deleteMemo,
          [memoId],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
